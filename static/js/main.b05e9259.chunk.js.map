{"version":3,"sources":["components/ScrollComponent.tsx","components/InteractiveMap.tsx","App.tsx","report-web-vitals.ts","index.tsx"],"names":["ScrollComponent","props","useState","data","steps","progress","getState","setGetState","console","log","className","mapComponent","onStepEnter","e","state","onStepExit","direction","onStepProgress","offset","debug","map","value","isVisible","background","visibility","style","Math","round","InteractiveMap","hoverCountryStyle","fillColor","fillOpacity","color","weight","MapContainer","zoom","height","width","center","scrollWheelZoom","dragging","keyboard","GeoJSON","regierungsbezirke","onEachFeature","feature","layer","name","properties","NAME_2","bindPopup","on","mouseover","event","target","setStyle","openPopup","mouseout","closePopup","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"utxUA2EeA,EAjES,SAACC,GACrB,IAMA,EAAgCC,mBANH,CACzBC,KAAM,EACNC,MAAO,CAAC,GAAI,GAAI,GAAI,IACpBC,SAAU,IAGd,mBAAOC,EAAP,KAAiBC,EAAjB,KAyBA,OAFAC,QAAQC,IAAIH,GAGR,8BACI,sBAAKI,UAAU,mBAAf,UACI,qBAAKA,UAAU,UAAf,SAA0BT,EAAMU,eAChC,qBAAKD,UAAU,WAAf,SACI,cAAC,IAAD,CACIE,YA7BA,SAACC,GACjB,IAAQV,EAASU,EAATV,KACRI,GAAY,SAACO,GACT,OAAO,2BAAKA,GAAZ,IAAmBX,KAAMA,QA2BbY,WAvBD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,UAAWb,EAAW,EAAXA,KACX,OAAda,GAAsBb,IAASG,EAASF,MAAM,IAC9CG,GAAY,SAACO,GACT,OAAO,2BAAKA,GAAZ,IAAmBX,KAAM,QAqBjBE,UAAQ,EACRY,eAjBG,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SACtBE,GAAY,SAACO,GACT,OAAO,2BAAKA,GAAZ,IAAmBT,SAAUA,QAgBjBa,OAAO,QACPC,OAAK,EANT,SAQKb,EAASF,MAAMgB,KAAI,SAACC,GACjB,IAAMC,EAAYD,IAAUf,EAASH,KAC/BoB,EAAaD,EAAS,2BAAuBhB,EAASD,SAAhC,KAA8C,QACpEmB,EAAaF,EAAY,UAAY,SAC3C,OACI,cAAC,IAAD,CAAMnB,KAAMkB,EAAZ,SACI,sBAAKX,UAAU,OAAOe,MAAO,CAAEF,cAA/B,UACI,6CAAgBF,KAChB,mBAAGI,MAAO,CAAED,cAAZ,SAA2BE,KAAKC,MAA0B,IAApBrB,EAASD,UAAmB,GAAK,UAHvDgB,gB,wBCKzCO,G,MApD2B,WACtC,IAMMC,EAAmC,CACrCC,UAAW,MACXC,YAAa,EACbC,MAAO,QACPC,OAAQ,GAuBZ,OACI,cAACC,EAAA,EAAD,CACIC,KAAM,EACNV,MAAO,CAAEW,OAAQ,OAAQC,MAAO,QAChCC,OAAQ,CAAC,KAAM,IACfC,iBAAiB,EACjBC,UAAU,EACVC,UAAU,EANd,SAQI,cAACC,EAAA,EAAD,CACIjB,MA3C+B,CACvCK,UAAW,MACXC,YAAa,GACbC,MAAO,QACPC,OAAQ,GAwCA9B,KAAMwC,EACNC,cAhCU,SAACC,EAAkBC,GAAwB,IAAD,EACtDC,EAAI,UAAGF,EAAQG,kBAAX,aAAG,EAAoBC,OACjCH,EAAMI,UAAUH,GAChBD,EAAMK,GAAG,CACLC,UAAW,SAACC,GACRA,EAAMC,OAAOC,SAAS1B,GACtBiB,EAAMU,aAEVC,SAAU,SAACJ,GACPA,EAAMC,OAAOC,SAAS,CAClBzB,UAAW,MACXC,YAAa,GACbC,MAAO,QACPC,OAAQ,IAEZa,EAAMY,uBCnCPC,MAJf,WACI,OAAO,cAAC,EAAD,CAAiBhD,aAAc,cAAC,EAAD,OCU3BiD,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.b05e9259.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { Scrollama, Step } from \"react-scrollama\";\nimport \"../style/ScrollComponent.css\";\n\ninterface IState {\n    data: number;\n    steps: number[];\n    progress: number;\n}\n\nconst ScrollComponent = (props: { mapComponent: JSX.Element }): JSX.Element => {\n    const initialState: IState = {\n        data: 0,\n        steps: [10, 20, 30, 40],\n        progress: 0,\n    };\n\n    const [getState, setGetState] = useState<IState>(initialState);\n\n    const onStepEnter = (e) => {\n        const { data } = e;\n        setGetState((state: IState) => {\n            return { ...state, data: data };\n        });\n    };\n\n    const onStepExit = ({ direction, data }) => {\n        if (direction === \"up\" && data === getState.steps[0]) {\n            setGetState((state: IState) => {\n                return { ...state, data: 0 };\n            });\n        }\n    };\n\n    const onStepProgress = ({ progress }) => {\n        setGetState((state: IState) => {\n            return { ...state, progress: progress };\n        });\n    };\n\n    console.log(getState);\n\n    return (\n        <div>\n            <div className=\"graphicContainer\">\n                <div className=\"graphic\">{props.mapComponent}</div>\n                <div className=\"scroller\">\n                    <Scrollama\n                        onStepEnter={onStepEnter}\n                        onStepExit={onStepExit}\n                        progress\n                        onStepProgress={onStepProgress}\n                        offset=\"400px\"\n                        debug\n                    >\n                        {getState.steps.map((value) => {\n                            const isVisible = value === getState.data;\n                            const background = isVisible ? `rgba(44,127,184, ${getState.progress})` : \"white\";\n                            const visibility = isVisible ? \"visible\" : \"hidden\";\n                            return (\n                                <Step data={value} key={value}>\n                                    <div className=\"step\" style={{ background }}>\n                                        <p>step value: {value}</p>\n                                        <p style={{ visibility }}>{Math.round(getState.progress * 1000) / 10 + \"%\"}</p>\n                                    </div>\n                                </Step>\n                            );\n                        })}\n                    </Scrollama>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ScrollComponent;\n","import regierungsbezirke from \"../data/regierungsbezirke.json\";\nimport { MapContainer, GeoJSON } from \"react-leaflet\";\nimport { Feature, GeoJsonObject } from \"geojson\";\nimport { Layer, LeafletEvent } from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\ninterface ICountryStyle {\n    fillColor: string;\n    fillOpacity: number;\n    color: string;\n    weight: number;\n}\n\nconst InteractiveMap: () => JSX.Element = () => {\n    const defaultCountryStyle: ICountryStyle = {\n        fillColor: \"red\",\n        fillOpacity: 0.5,\n        color: \"white\",\n        weight: 1,\n    };\n    const hoverCountryStyle: ICountryStyle = {\n        fillColor: \"red\",\n        fillOpacity: 1,\n        color: \"white\",\n        weight: 3,\n    };\n\n    const onEachFeature = (feature: Feature, layer: Layer): void => {\n        const name = feature.properties?.NAME_2;\n        layer.bindPopup(name);\n        layer.on({\n            mouseover: (event: LeafletEvent) => {\n                event.target.setStyle(hoverCountryStyle);\n                layer.openPopup();\n            },\n            mouseout: (event: LeafletEvent) => {\n                event.target.setStyle({\n                    fillColor: \"red\",\n                    fillOpacity: 0.5,\n                    color: \"white\",\n                    weight: 1,\n                });\n                layer.closePopup();\n            },\n        });\n    };\n\n    return (\n        <MapContainer\n            zoom={7}\n            style={{ height: \"100%\", width: \"100%\" }}\n            center={[48.7, 12]}\n            scrollWheelZoom={false}\n            dragging={false}\n            keyboard={false}\n        >\n            <GeoJSON\n                style={defaultCountryStyle}\n                data={regierungsbezirke as GeoJsonObject}\n                onEachFeature={onEachFeature}\n            />\n        </MapContainer>\n    );\n};\n\nexport default InteractiveMap;\n","import ScrollComponent from \"./components/ScrollComponent\";\nimport InteractiveMap from \"./components/InteractiveMap\";\n\nfunction App(): JSX.Element {\n    return <ScrollComponent mapComponent={<InteractiveMap />} />;\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./report-web-vitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}